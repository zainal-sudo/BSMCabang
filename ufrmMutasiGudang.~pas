unit ufrmMutasiGudang;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids,  AdvGrid, ComCtrls, StdCtrls, AdvEdit, ExtCtrls,
  AdvPanel, AdvCGrid, BaseGrid,SqlExpr, DBAdvGrd, DB, DBClient, Provider,
  FMTBcd, RAWPrinter, StrUtils, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinsDefaultPainters, cxTextEdit, cxMaskEdit, cxDropDownEdit,
  cxLookupEdit, cxDBLookupEdit, cxDBExtLookupComboBox, cxStyles,
  dxSkinscxPCPainter, cxCustomData, cxFilter, cxData, cxDataStorage,
  cxDBData, cxSpinEdit, cxCalendar, Menus, cxButtons, cxGridLevel,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxClasses,
  cxGridCustomView, cxGrid, cxButtonEdit, frxClass, frxDMPExport, MyAccess;

type
  TfrmMutasiGudang = class(TForm)
    AdvPanel1: TAdvPanel;
    lbljudul: TLabel;
    AdvPanel2: TAdvPanel;
    Label2: TLabel;
    Label4: TLabel;
    dttanggal: TDateTimePicker;
    AdvPanel3: TAdvPanel;
    Label3: TLabel;
    edtKeterangan: TAdvEdit;
    Label1: TLabel;
    Label5: TLabel;
    RAWPrinter1: TRAWPrinter;
    cxLookupGudangTujuan: TcxExtLookupComboBox;
    cxLookupGudangAsal: TcxExtLookupComboBox;
    edtNomor: TAdvEdit;
    cxGrid: TcxGrid;
    cxGrdMain: TcxGridDBTableView;
    clNo: TcxGridDBColumn;
    clSKU: TcxGridDBColumn;
    clNamaBarang: TcxGridDBColumn;
    clQTY: TcxGridDBColumn;
    clSatuan: TcxGridDBColumn;
    clExpired: TcxGridDBColumn;
    cxGrdDetail: TcxGridDBTableView;
    lvMaster: TcxGridLevel;
    AdvPanel4: TAdvPanel;
    cxButton8: TcxButton;
    cxButton2: TcxButton;
    cxButton1: TcxButton;
    clKeterangan: TcxGridDBColumn;
    PopupMenu1: TPopupMenu;
    HapusRecord1: TMenuItem;
    clgudang: TcxGridDBColumn;
    Button1: TButton;
    frxDotMatrixExport1: TfrxDotMatrixExport;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edtNomorExit(Sender: TObject);
    procedure refreshdata;
    procedure simpandata;
    procedure loaddataall(akode : string);
    procedure doslipmutasi(anomor : string );
    function GetCDS: TClientDataSet;

    function getmaxkode:string;
    procedure FormCreate(Sender: TObject);
    procedure insertketampungan(anomor:string);
    procedure cxButton8Click(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure cxButton1Click(Sender: TObject);
    function cekdata:Boolean;

    procedure initgrid;
    procedure HapusRecord1Click(Sender: TObject);
    procedure clNoGetDisplayText(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; var AText: String);
    procedure cxLookupGudangAsalPropertiesEditValueChanged(
      Sender: TObject);
    procedure clQTYPropertiesEditValueChanged(Sender: TObject);
    procedure cxLookupGudangAsalPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
    procedure clSKUPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure bantuansku;
    procedure Button1Click(Sender: TObject);
    procedure clSKUPropertiesEditValueChanged(Sender: TObject);
    procedure clQTYPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
  private
    buttonSelected  : integer;
    FID : STRING;
    FCDSSKU : TClientDataset;
    FCDSGudang: TClientDataset;
    FFLAGEDIT: Boolean;
    xtotal : Double;
    function GetCDSGudang: TClientDataset;
    procedure initViewSKU;
    { Private declarations }
     protected
    FCDS: TClientDataSet;
  public
    property CDS: TClientDataSet read GetCDS write FCDS;
    property CDSSKU: TClientDataSet read FCDSSKU write FCDSSKU;
    property CDSGudang: TClientDataset read GetCDSGudang write FCDSGudang;
    property ID: string read FID write FID;
    property FLAGEDIT: Boolean read FFLAGEDIT write FFLAGEDIT;
    { Public declarations }
  end;
  
 const
    NOMERATOR = 'MTG';

var
  frmMutasiGudang: TfrmMutasiGudang;

implementation
uses MAIN, uModuleConnection, uFrmbantuan, Ulib, uReport;

{$R *.dfm}

procedure TfrmMutasiGudang.FormShow(Sender: TObject);
begin
  refreshdata;
end;

procedure TfrmMutasiGudang.FormClose(Sender: TObject;
var
  Action: TCloseAction);
begin
  Action := caFree;
  Release;
end;

procedure TfrmMutasiGudang.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    SelectNext(ActiveControl,True,True);
end;

procedure TfrmMutasiGudang.edtNomorExit(Sender: TObject);
begin
  edtNomor.Enabled := False;
  loaddataall(edtNomor.Text);
end;


procedure TfrmMutasiGudang.refreshdata;
begin
  FID := '';
  FLAGEDIT := False;
  dttanggal.DateTime := Date;
  edtKeterangan.Clear;
  cxLookupGudangTujuan.EditValue := '';
  cxLookupGudangAsal.EditValue := '';
  cxLookupGudangAsal.SetFocus;
  initgrid;
end;

procedure TfrmMutasiGudang.simpandata;
var
  s: String;
  i: Integer;
  tt: TStrings;
  anomor: String;
begin
  if flagedit then
  begin
    anomor := edtNomor.Text;
    s := 'update tmutasi_hdr set '
       + ' mut_tanggal = ' + QuotD(dttanggal.DateTime) + ','
       + ' mut_keterangan = ' + Quot(edtKeterangan.Text) + ','
       + ' mut_gdg_asal = ' + Quot(cxLookupGudangAsal.EditValue) + ','
       + ' mut_gdg_tujuan = ' + Quot(cxLookupGudangTujuan.EditValue) + ','
       + ' date_modified  = ' + QuotD(cGetServerTime,True) + ','
       + ' user_modified = ' + Quot(frmMenu.KDUSER)
       + ' where mut_nomor = ' + Quot(edtNomor.Text);
  end
  else
  begin
    anomor := getmaxkode;
    edtNomor.Text := anomor;
    s := ' insert into tmutasi_hdr '
       + '( mut_nomor, mut_tanggal, mut_keterangan, mut_gdg_asal, mut_gdg_tujuan, date_create, user_create) values ( '
       + Quot(anomor) + ','
       + Quotd(dttanggal.DateTime) + ','
       + Quot(edtKeterangan.Text) + ','
       + Quot(cxLookupGudangAsal.EditValue) + ','
       + Quot(cxLookupGudangTujuan.EditValue) + ','
       + QuotD(cGetServerTime,True) + ','
       + Quot(frmMenu.KDUSER) + ')';
  end;

  EnsureConnected(frmMenu.conn);
  ExecSQLDirect(frmMenu.conn, s);

  tt := TStringList.Create;
  s:= ' delete from tmutasi_dtl '
    + ' where  mutd_mut_nomor = ' + quot(FID) ;
  tt.Append(s);
  i:=1;
  CDS.First;
  while not CDS.Eof do
  begin
    if (CDS.FieldByName('qty').AsInteger >  0) and (CDS.FieldByName('sku').AsInteger >  0) then
    begin
      s := ' insert into tmutasi_dtl '
         + ' (mutd_mut_nomor, mutd_brg_kode, mutd_qty, mutd_keterangan, mutd_expired, mutd_nourut, mutd_gdg_kode) values ( '
         + Quot(anomor) + ','
         + IntToStr(CDS.FieldByName('SKU').AsInteger) + ','
         + IntToStr(CDS.FieldByName('qty').AsInteger) + ','
         + Quot(CDS.FieldByName('keterangan').Asstring) + ','
         + QuotD(CDS.FieldByName('expired').Asdatetime) +','
         + IntToStr(i)+','
         + quot(CDS.FieldByName('gudang').Asstring)
         +');';
      tt.Append(s);
    end;
    CDS.next;
    Inc(i);
  end;
  
  try
    for i:=0 to tt.Count -1 do
    begin
      EnsureConnected(frmMenu.conn);
      ExecSQLDirect(frmMenu.conn, tt[i]);
    end;
  finally
    tt.Free;
  end;
end;

procedure TfrmMutasiGudang.loaddataall(akode : string);
var
  s: string ;
  tsql: TmyQuery;
  i: Integer;
begin
  if akode = '' then
  begin
    flagedit := false;
    Exit;
  end;

  s := ' select mut_nomor, mut_tanggal, mut_keterangan, mut_gdg_asal, gdg_nama, mut_gdg_tujuan, '
     + ' mutd_brg_kode, brg_nama, brg_satuan, mutd_qty, mutd_expired, '
     + ' mutd_keterangan, mutd_gdg_kode'
     + ' from tmutasi_hdr a'
     + ' inner join tmutasi_dtl d on a.mut_nomor = d.mutd_mut_nomor '
     + ' inner join tbarang b on d.mutd_brg_kode = b.brg_kode '
     + ' left join tgudang on mut_gdg_asal = gdg_kode '
     + ' where a.mut_nomor = ' + Quot(akode);
  tsql := xOpenQuery(s,frmMenu.conn);

  try
    with  tsql do
    begin
      if not eof then
      begin
        flagedit := True;
        FID := fieldbyname('mut_nomor').AsString;
        edtNomor.Text := fieldbyname('mut_nomor').AsString;
        dttanggal.DateTime := fieldbyname('mut_tanggal').AsDateTime;
        cxLookupGudangAsal.EditValue := fieldbyname('mut_gdg_asal').AsString;
        edtketerangan.Text := fieldbyname('mut_keterangan').AsString;
        cxLookupGudangTujuan.EditValue := fieldbyname('mut_gdg_tujuan').AsString;
        i := 1;

        CDS.EmptyDataSet;
        while not Eof do
        begin
          CDS.Append;

          CDS.FieldByName('SKU').AsInteger        := fieldbyname('mutd_brg_kode').AsInteger;
          CDS.fieldbyname('NamaBarang').AsString  := fieldbyname('brg_nama').AsString;
          CDS.fieldbyname('satuan').AsString      := fieldbyname('brg_satuan').AsString;
          CDS.FieldByName('QTY').AsInteger        := fieldbyname('mutd_qty').AsInteger;
          CDS.FieldByName('expired').AsDateTime   := fieldbyname('mutd_expired').AsDateTime;
          CDS.FieldByName('keterangan').AsString  := fieldbyname('mutd_keterangan').AsString;
          CDS.FieldByName('gudang').AsString      := fieldbyname('mutd_gdg_kode').AsString;
          CDS.Post;
          i:=i+1;
          next;
        end;
      end
      else
      begin
        ShowMessage('Nomor Mutasi tidak di temukan');
        edtNomor.Enabled := true;
        edtNomor.SetFocus;
      end;
    end;
  finally
    tsql.Free;
  end;
end;

procedure TfrmMutasiGudang.doslipmutasi(anomor : string );
var
  s: String;
  ftsreport: TTSReport;
begin
  insertketampungan(anomor);
  ftsreport := TTSReport.Create(nil);

  try
    ftsreport.Nama := 'mutasi';

    s := ' select '
       + ' *,(select gdg_nama from tgudang where gdg_kode = a.mut_gdg_asal) asal ,'
       + ' (select gdg_nama from tgudang where gdg_kode = a.mut_gdg_tujuan) tujuan'
       + ' from tmutasi_hdr a '
       + ' inner join tampung e on e.nomor = a.mut_nomor '
       + ' left join  tmutasi_dtl b on mut_nomor = mutd_mut_nomor and e.tam_nama = b.mutd_brg_kode and mutd_expired = expired'
       + ' left join tbarang c on b.mutd_brg_kode = c.brg_kode '
       + ' where '
       + ' a.mut_nomor = ' + quot(anomor);
       
    ftsreport.AddSQL(s);
    ftsreport.ShowReport;
  finally
    ftsreport.Free;
  end;
end;

procedure TfrmMutasiGudang.insertketampungan(anomor:String);
var
  s: String;
  tsql: TmyQuery;
  a,i,x: Integer;
  tt: TStrings;
begin
  a := 14;
  s := 'delete from tampung';

  EnsureConnected(frmMenu.conn);
  ExecSQLDirect(frmMenu.conn, s);
  
  s := 'select MUTd_BRG_kode,mutd_expired from tmutasi_dtl where mutd_mut_nomor = ' + Quot(anomor) ;
  tsql := xOpenQuery(s,frmMenu.conn);

  x := 0;
  tt := TStringList.Create;
  with tsql do
  begin
    try
      while not Eof do
      begin
        x := x+1;
        s := 'insert into tampung '
           + '(nomor, tam_nama,expired'
           + ')values ('
           + Quot(anomor) + ','
           + Quot(Fields[0].Asstring) + ','
           + quotd(fields[1].AsDateTime)
           + ');';
        tt.Append(s);
        Next
      end;
    finally
      free;
    end;
  end;

  for i := x to a do
  begin
    s := 'insert  into tampung '
       + '(nomor,tam_nama'
       + ')values ('
       + Quot(anomor) + ','
       + Quot('-')
       + ');';
    tt.Append(s);
  end;

  try
    for i:=0 to tt.Count -1 do
    begin
      EnsureConnected(frmMenu.conn);
      ExecSQLDirect(frmMenu.conn, tt[i]);
    end;
  finally
    tt.Free;
  end;
end;

function TfrmMutasiGudang.getmaxkode:string;
var
  s: String;
begin
  s := 'select max(right(mut_nomor,4)) from tmutasi_hdr  where mut_nomor like ' + quot(NOMERATOR+'.'+FormatDateTime('yymm',dtTanggal.Date)+'.%');
  with xOpenQuery(s,frmMenu.conn) do
  begin
    try
      if Fields[0].AsString = '' then
         result:= NOMERATOR+'.'+FormatDateTime('yymm',dtTanggal.Date)+'.'+RightStr(IntToStr(10000+1),4)
      else
         result:= NOMERATOR+'.'+FormatDateTime('yymm',dtTanggal.Date)+'.'+RightStr(IntToStr(10000+fields[0].AsInteger+1),4);
    finally
      free;
    end;
  end;
end;

procedure TfrmMutasiGudang.FormCreate(Sender: TObject);
begin
  with TcxExtLookupHelper(cxLookupGudangTujuan.Properties) do
    LoadFromCDS(CDSGudang, 'Kode','Gudang',['Kode'],Self);
  with TcxExtLookupHelper(cxLookupGudangAsal.Properties) do
    LoadFromCDS(CDSGudang, 'Kode','Gudang',['Kode'],Self);
  TcxDBGridHelper(cxGrdMain).LoadFromCDS(CDS, False, False);
//     initViewSKU;
end;

function TfrmMutasiGudang.GetCDS: TClientDataSet;
begin
  If not Assigned(FCDS) then
  begin
    FCDS := TClientDataSet.Create(Self);
    zAddField(FCDS, 'No', ftInteger, False);
    zAddField(FCDS, 'SKU', ftString, False,255);
    zAddField(FCDS, 'NamaBarang', ftString, False,100);
    zAddField(FCDS, 'Satuan', ftString, False,10);
    zAddField(FCDS, 'QTY', ftInteger, False);
    zAddField(FCDS, 'expired', ftDate, False,255);
    zAddField(FCDS, 'Keterangan', ftString, False,255);
    zAddField(FCDS, 'gudang', ftString, False,100);

    FCDS.CreateDataSet;
  end;
  
  Result := FCDS;
end;

function TfrmMutasiGudang.GetCDSGudang: TClientDataset;
var
  s: String;
begin
  If not Assigned(FCDSGudang) then
  begin
    S := 'select gdg_nama as Gudang, gdg_kode Kode '
       + 'from tgudang';

    FCDSGudang := TConextMain.cOpenCDS(S, nil);
  end;

  Result := FCDSGudang;
end;

procedure TfrmMutasiGudang.initViewSKU;
var
  S: string;
begin
  if Assigned(FCDSSKU) then FCDSSKU.Free;

  S := ' select brg_kode sku, brg_nama NamaBarang, brg_satuan Satuan, mst_expired_date expired, sum(mst_stok_in-mst_stok_out) stok from Tbarang '
     + ' inner join tmasterstok  on mst_brg_kode = brg_kode and mst_gdg_kode = ' + Quot(vartostr(cxLookupGudangAsal.EditValue))
     + ' group by brg_kode, brg_nama, brg_satuan, mst_expired_date';

  FCDSSKU := TConextMain.cOpenCDS(S, nil);

  with TcxExtLookupHelper(clSKU.Properties) do
  begin
    LoadFromCDS(CDSSKU, 'SKU','SKU', ['SKU'], Self);
    SetMultiPurposeLookup;
  end;

  with TcxExtLookupHelper(clNamaBarang.Properties) do
    LoadFromCDS(CDSSKU, 'SKU','NamaBarang',['SKU'],Self);

  with TcxExtLookupHelper(clSatuan.Properties) do
    LoadFromCDS(CDSSKU, 'SKU','Satuan',['SKU','NamaBarang','expired'],Self);
end;

procedure TfrmMutasiGudang.cxButton8Click(Sender: TObject);
begin
  Release;
end;

procedure TfrmMutasiGudang.cxButton2Click(Sender: TObject);
begin
  try
    If not cekdata then exit;

    if (FLAGEDIT) and ( not cekedit(frmMenu.KDUSER,self.name)) then
    begin
      MessageDlg('Anda tidak berhak Edit di Modul ini',mtWarning, [mbOK],0);
      Exit;
    End;

    if (not FLAGEDIT) and ( not cekinsert(frmMenu.KDUSER,self.name)) then
    begin
      MessageDlg('Anda tidak berhak Insert di Modul ini',mtWarning, [mbOK],0);;
      Exit;
    End;

    if MessageDlg('Yakin ingin simpan ?',mtCustom,
                            [mbYes,mbNo], 0)= mrNo
    then Exit ;

    simpandata;
    refreshdata;
  except
    ShowMessage('Gagal Simpan');
    Exit;
  end;

  Release;
end;

procedure TfrmMutasiGudang.cxButton1Click(Sender: TObject);
begin
  try
    If not cekdata then exit;

    if (FLAGEDIT) and ( not cekedit(frmMenu.KDUSER, self.name)) then
    begin
      MessageDlg('Anda tidak berhak Edit di Modul ini', mtWarning, [mbOK], 0);
      Exit;
    End;

    if (not FLAGEDIT) and ( not cekinsert(frmMenu.KDUSER, self.name)) then
    begin
      MessageDlg('Anda tidak berhak Insert di Modul ini', mtWarning, [mbOK], 0);
      Exit;
    End;

    if MessageDlg('Yakin ingin simpan ?',mtCustom,
                            [mbYes,mbNo], 0)= mrNo
    then Exit;

    simpandata;
    refreshdata;
  except
    ShowMessage('Gagal Simpan');
    Exit;
  end;
end;


function TfrmMutasiGudang.cekdata:Boolean;
var
  i: Integer;
begin
  result := true;
  i := 1;

  If cxLookupGudangAsal.EditValue = '' then
  begin
    ShowMessage('Gudang Asal belum di pilih');
    result := false;
    Exit;
  end;

  If cxLookupGudangTujuan.EditValue = '' then
  begin
    ShowMessage('Gudang Tujuan belum di pilih');
    result := false;
    Exit;
  end;

  CDS.First;
  While not CDS.Eof do
  begin
    If CDS.FieldByName('SKU').AsInteger = 0 then
    begin
      ShowMessage('SKU Baris : ' + inttostr(i) + ' Belum dipilih');
      result := false;
      Exit;
    end;
    
    inc(i);
    CDS.Next;
  end;
end;

procedure TfrmMutasiGudang.initgrid;
begin
  CDS.EmptyDataSet;
  CDS.Append;
  CDS.FieldByName('QTY').AsInteger := 0;
  CDS.FIELDBYname('keterangan').asstring := '';
  CDS.Post;
end;

procedure TfrmMutasiGudang.HapusRecord1Click(Sender: TObject);
begin
  If CDS.Eof then exit;
  CDS.Delete;
  If CDS.Eof then initgrid;
end;

procedure TfrmMutasiGudang.clNoGetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: String);
begin
  If Assigned(ARecord) then
  begin
    AText := Inttostr(ARecord.Index+1);
  end;
end;

procedure TfrmMutasiGudang.cxLookupGudangAsalPropertiesEditValueChanged(
  Sender: TObject);
begin
//initViewSKU;
end;

procedure TfrmMutasiGudang.clQTYPropertiesEditValueChanged(
  Sender: TObject);
begin
  If CDS.State <> dsEdit then
    CDS.Edit;

  cxGrdMain.DataController.Post;
end;

procedure TfrmMutasiGudang.cxLookupGudangAsalPropertiesValidate(
  Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
  var Error: Boolean);
begin
  if (cxLookupGudangTujuan.EditValue = cxLookupGudangAsal.EditValue) then
  begin
    Error := true;
    ErrorText := 'Gudang Asal tidak boleh sama dengan gudang Tujuan';
  end;
end;

procedure TfrmMutasiGudang.clSKUPropertiesButtonClick(Sender: TObject;
  AButtonIndex: Integer);
begin
  bantuansku;
end;

procedure TfrmMutasiGudang.bantuansku;
var
  s: String;
  tsql: TmyQuery;
  i: Integer;
begin
  sqlbantuan := ' select brg_kode Sku, mst_expired_date Expired,brg_nama NamaBarang, brg_satuan Satuan,sum(mst_stok_in-mst_stok_out) stok from Tbarang '
              + ' inner join tmasterstok  on mst_brg_kode=brg_kode and mst_gdg_kode= '+ Quot(vartostr(cxLookupGudangAsal.EditValue))
              + ' group by brg_kode, brg_nama, brg_satuan, mst_expired_date';

  Application.CreateForm(Tfrmbantuan, frmbantuan);
  frmBantuan.SQLMaster := SQLbantuan;
  frmBantuan.ShowModal;

  if varglobal <> '' then
  begin
    for i := 0 to cxGrdMain.DataController.RecordCount-1 do
    begin
      If (cVarToInt(cxGrdMain.DataController.Values[i, clSKU.Index]) = StrToInt(varglobal)) and (cxGrdMain.DataController.FocusedRecordIndex <> i)
      and (StrToDate(varglobal1)= cVarTodate(cxGrdMain.DataController.Values[i, clexpired.Index])) then
      begin
        ShowMessage('Sku dan expired ada yang sama dengan baris '+ IntToStr(i+1));
        CDS.Cancel;
        exit;
      end;
    end;

    If CDS.State <> dsEdit then
      CDS.Edit;

    CDS.FieldByName('sku').AsInteger := StrToInt(varglobal);
    CDS.FieldByName('expired').AsDateTime := strtodate(varglobal1);

    s := ' select brg_kode Sku, mst_expired_date Expired,brg_nama NamaBarang, brg_satuan Satuan,sum(mst_stok_in-mst_stok_out) stok from Tbarang '
       + ' inner join tmasterstok  on mst_brg_kode=brg_kode and mst_gdg_kode= '+ Quot(vartostr(cxLookupGudangAsal.EditValue))
       + ' where brg_kode = ' + Quot(CDS.Fieldbyname('sku').AsString)
       + ' and mst_expired_date = ' + QuotD(CDS.Fieldbyname('expired').AsDateTime)
       + ' group by brg_kode, brg_nama, brg_satuan, mst_expired_date ';
    tsql := xOpenQuery(s, frmMenu.conn);

    with tsql do
    begin
      try
        if not Eof then
        begin
          CDS.FieldByName('NamaBarang').AsString := Fields[2].AsString;
          CDS.FieldByName('Satuan').AsString := Fields[3].AsString;
          CDS.FieldByName('gudang').AsString := cxLookupGudangAsal.EditValue;
        end
        else
          bantuansku;
      finally
        free;
      end;
    end;
  end;
end;

procedure TfrmMutasiGudang.Button1Click(Sender: TObject);
var
  s: String;
  tsql: TmyQuery;
begin
  s := ' select brg_kode Kode,brg_nama Nama,brg_satuan Satuan,mst_expired_date Expired,'
     + ' gdg_nama Gudang,sum(mst_stok_in - mst_stok_out) Stok,mst_hargabeli from tbarang '
     + ' inner join tmasterstok on mst_brg_kode=brg_kode  '
     + ' inner join tgudang on gdg_kode=mst_gdg_kode '
     + ' where mst_gdg_kode = ' + quot(cxLookupGudangasal.EditValue)
     + ' group by '
     + ' mst_gdg_kode,brg_kode,mst_expired_date,gdg_nama '
     + ' HAVING STOK <> 0 '
     + ' order by brg_kode';
  tsql := xOpenQuery(s,frmMenu.conn);

  with tsql do
  begin
    try
      CDS.EmptyDataSet;
      while not Eof do
      begin
        cds.Append;
        CDS.FieldByName('SKU').AsString := Fields[0].AsString;
        CDS.FieldByName('NamaBarang').AsString := Fields[1].AsString;
        CDS.FieldByName('Satuan').AsString := Fields[2].AsString;
        CDS.FieldByName('EXPIRED').Asdatetime := Fields[3].AsDateTime;
        CDS.FieldByName('qTY').asfloat :=Fields[5].Asfloat;
        CDS.FieldByName('gudang').asstring :=cxLookupGudangAsal.EditValue;
        CDS.Post;
        Next;
      end
    finally
      free;
    end;
  end;
end;

procedure TfrmMutasiGudang.clSKUPropertiesEditValueChanged(
  Sender: TObject);
begin
  bantuansku
end;

procedure TfrmMutasiGudang.clQTYPropertiesValidate(Sender: TObject;
  var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
var
  i: Integer;
  aqtystok: Integer;
  s: String;
  tsql: TmyQuery;
begin
  aqtystok := 0;
  s := ' select sum(mst_stok_in-mst_stok_out) stok from Tbarang '
     + ' inner join tmasterstok on mst_brg_kode = brg_kode and mst_gdg_kode = '+ Quot(vartostr(cxLookupGudangAsal.EditValue))
     + ' where brg_kode = ' + Quot(CDS.Fieldbyname('sku').AsString)
     + ' and mst_expired_date = ' + QuotD(CDS.Fieldbyname('expired').AsDateTime);
  tsql := xOpenQuery(s, frmMenu.conn);

  with tsql do
  begin
    try
      if not Eof then
        aqtystok := Fields[0].AsInteger;
    finally
      free;
    end;
  end;

  if cVarToInt(DisplayValue)> aqtyStok then
  begin
    error := true;
    ErrorText := 'Qty melebihi Stok di Gudang';
    exit;
  end;
end;

end.
